import os
import logging

import telegram.error
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from . import database
from . import mcp_handler
from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_API_KEY = 0


# TODO: —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–ì –±–æ—Ç–∞ –∏ MCP –∫–ª–∏–µ–Ω—Ç–∞
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞."""
    help_text = (
        "–Ø –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenProject. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "‚û°Ô∏è /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à API –∫–ª—é—á.\n"
        "‚û°Ô∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚û°Ô∏è /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥ API –∫–ª—é—á–∞).\n\n"
        "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞ –≤—ã –º–æ–∂–µ—Ç–µ –¥–∞–≤–∞—Ç—å –º–Ω–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ:\n"
        "üîπ <b>'–ü–æ–∫–∞–∂–∏ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã'</b> - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n"
        "üîπ <b>'–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–¥–∞—á–∏] –≤ –ø—Ä–æ–µ–∫—Ç–µ [ID_–ø—Ä–æ–µ–∫—Ç–∞] [–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º [–æ–ø–∏—Å–∞–Ω–∏–µ]]'</b> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.\n"
        "   <i>–ü—Ä–∏–º–µ—Ä: '–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –ù–æ–≤–∞—è —Ñ–∏—á–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ 123 —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'</i> \n"
        "üîπ <b>'–ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ [ID_–ø—Ä–æ–µ–∫—Ç–∞]'</b> - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ.\n"
        "   <i>–ü—Ä–∏–º–µ—Ä: '–ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ 456'</i> \n"
        "üîπ <b>'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π [N] —á–∞—Å–æ–≤ –Ω–∞ –∑–∞–¥–∞—á—É [ID_–∑–∞–¥–∞—á–∏] [–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]]'</b> - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É.\n"
        "   <i>–ü—Ä–∏–º–µ—Ä: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π 2.5 —á–∞—Å–∞ –Ω–∞ –∑–∞–¥–∞—á—É 789 —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞'</i> \n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞/–∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö, –µ—Å–ª–∏ —è –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."
    )
    await update.message.reply_html(help_text) # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_html –≤–º–µ—Å—Ç–æ reply_text


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–±–æ—Ä–∞ API –∫–ª—é—á–∞."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")
    await help_command(update, context)
    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenProject. "
        f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API –∫–ª—é—á (API token).\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ OpenProject –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ú–∞—Ä–∫–µ—Ä—ã –¥–æ—Å—Ç—É–ø–∞-> + –¢–æ–∫–µ–Ω API. \n\n"
        f"–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—å –º–Ω–µ –í–∞—à –∫–ª—é—á –∏ —è –∑–∞–ø–æ–º–Ω—é –µ–≥–æ –Ω–∞–≤—Å–µ–≥–¥–∞."
    )
    return GET_API_KEY


async def handle_api_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π API –∫–ª—é—á."""
    user = update.effective_user
    api_key = update.message.text.strip()

    if len(api_key) == 64 and all(c in '0123456789abcdefABCDEF' for c in api_key):
        database.save_api_key(user.id, api_key)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω API –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}.")

        await update.message.reply_text(
            "‚úÖ –í–∞—à API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–∫–∞–∂–∏ –≤—Å–µ –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã'."
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á OpenProject. "
        )
        return GET_API_KEY


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞–ø—Ä–æ—Å—ã –∫ MCP –∞–≥–µ–Ω—Ç—É."""
    user = update.effective_user
    thread_id = str(user.id)
    query = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user.id}: '{query}'")

    api_key = database.get_api_key(user.id)
    if not api_key:
        await update.message.reply_text(
            "–í–∞—à API –∫–ª—é—á –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ."
        )
        return

    processing_message = await update.message.reply_markdown_v2("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å")
    response_text = await mcp_handler.run_mcp_agent(api_key, query, thread_id)
    try:
        await processing_message.edit_text(response_text, parse_mode=ParseMode.MARKDOWN_V2)
    except telegram.error.BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {e}")
        await processing_message.edit_text(response_text)


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not telegram_token:
        print("–û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    database.init_db()
    application = Application.builder().token(telegram_token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            GET_API_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_api_key)],
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))  # <-- –î–æ–±–∞–≤–ª–µ–Ω–∞ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...")
    application.run_polling()


if __name__ == "__main__":
    main()
