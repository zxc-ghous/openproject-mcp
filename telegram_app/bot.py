import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from . import database
from . import mcp_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_API_KEY = 0


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–±–æ—Ä–∞ API –∫–ª—é—á–∞."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")

    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenProject. "
        f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API –∫–ª—é—á (API token).\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ OpenProject –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ú–∞—Ä–∫–µ—Ä—ã –¥–æ—Å—Ç—É–ø–∞-> + –¢–æ–∫–µ–Ω API. \n\n"
        f"–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—å –º–Ω–µ –í–∞—à –∫–ª—é—á –∏ —è –∑–∞–ø–æ–º–Ω—é –µ–≥–æ –Ω–∞–≤—Å–µ–≥–¥–∞."
    )
    return GET_API_KEY


async def handle_api_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π API –∫–ª—é—á."""
    user = update.effective_user
    api_key = update.message.text.strip()

    if len(api_key) < 20:  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await update.message.reply_text(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ API –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /cancel.")
        return GET_API_KEY

    database.save_api_key(user.id, api_key)
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω API –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}.")

    await update.message.reply_text(
        "‚úÖ –í–∞—à API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–∫–∞–∂–∏ –≤—Å–µ –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã'."
    )
    return ConversationHandler.END


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞–ø—Ä–æ—Å—ã –∫ MCP –∞–≥–µ–Ω—Ç—É."""
    user = update.effective_user
    query = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user.id}: '{query}'")

    api_key = database.get_api_key(user.id)
    if not api_key:
        await update.message.reply_text(
            "–í–∞—à API –∫–ª—é—á –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ."
        )
        return

    await update.message.reply_text("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    response_text = await mcp_handler.run_mcp_agent(api_key, query)
    await update.message.reply_text(response_text)


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not telegram_token:
        print("–û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    database.init_db()
    application = Application.builder().token(telegram_token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            GET_API_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_api_key)],
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...")
    application.run_polling()

if __name__=="__main__":
    main()